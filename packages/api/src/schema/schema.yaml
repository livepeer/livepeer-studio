openapi: 3.0.1
info:
  title: Livepeer API Reference
  description: >-
    This API reference provides documentation for the Livepeer Studio API, which
    is a RESTful API that allows users to manage and interact with Livepeer
    Studio, the gateway to Livepeer network.
  version: 1.0.0
  termsOfService: "https://livepeer.studio/terms-of-service"

servers:
  - url: https://livepeer.studio/api

tags:
  - name: Stream Endpoints
    description: "Endpoints for creating, managing and deleting streams."
  - name: Object Stores Endpoints
    description: >-
      Endpoints for managing object stores, such as Amazon S3 and Google Cloud
      Storage.
  - name: Multistream Target Endpoints
    description: >-
      Endpoints for managing multistream targets, which allow users to
      distribute their streams to multiple destinations.
  - name: User Endpoints
    description: >-
      Endpoints for managing users, such as creating new users and retrieving
      user information.
  - name: API Token Endpoints
    description: >-
      Endpoints for managing API tokens, which are used to authenticate requests
      to the Livepeer Studio API.
  - name: User Login Endpoints
    description: Endpoints for user authentication and login.
  - name: User Email Verification Endpoints
    description: Endpoints for verifying a user's email address.
  - name: User Password Reset Endpoints
    description: Endpoints for resetting a user's password.
  - name: Make Admin Endpoints
    description: Endpoints for changing a user's admin status.
  - name: Webhook Endpoints
    description: Endpoints for managing webhooks and their subscriptions.
  - name: Asset Endpoints
    description: Endpoints for managing the video assets.
  - name: Task Endpoints
    description:
      "Endpoints for managing background tasks, such as video transcoding."
  - name: Signing Key Endpoints
    description: Endpoints for managing signing keys.
  - name: Webhook Response Endpoints
    description: Endpoints for handling responses from webhook clients.
  - name: Verify Email Endpoints
    description: Endpoints for resending email verification requests to users.

components:
  schemas:
    ffmpeg-profile:
      type: object
      description: LMPS ffmpeg profile for video encoding
      additionalProperties: false
      required:
        - width
        - name
        - height
        - bitrate
        - fps
      properties:
        width:
          type: integer
          description: The width of the encoded video in pixels.
          minimum: 128
          example: 1920
        name:
          type: string
          description: A descriptive name for the video profile.
          minLength: 1
          maxLength: 500
          example: 1080p
        height:
          type: integer
          description: The height of the encoded video in pixels.
          minimum: 128
          example: 1080
        bitrate:
          type: integer
          description:
            The target bitrate for the encoded video in bits per second.
          minimum: 400
          example: 4000000
        fps:
          type: integer
          description: The target frames per second for the encoded video.
          minimum: 1
          example: 30
        fpsDen:
          type: integer
          description: >-
            The denominator of the target frames per second. Used in conjunction
            with `fps` to specify the exact frame rate as a fraction.
          minimum: 1
          example: 1
        gop:
          type: string
          description: >-
            The GOP (Group of Pictures) structure for the encoded video. This is
            a string in the format of "M/N", where M is the number of frames in
            a GOP and N is the distance in frames between two I-frames (also
            known as keyframes).
          example: 25/250
        profile:
          type: string
          description: The video codec profile to use for encoding the video.
          enum:
            - H264Baseline
            - H264Main
            - H264High
            - H264ConstrainedHigh
            - HEVCMain
            - HEVCHigh
            - VP8
            - VP9
          example: H264High
        encoder:
          type: string
          description: The video codec to use for encoding the video.
          enum:
            - h264
            - hevc
            - vp8
            - vp9
          example: h264
    cdn-data-row:
      type: object
      description:
        Fields taken from raw log access data provided by StackPath CDN.
      additionalProperties: false
      required:
        - unique_client_ips
        - total_sc_bytes
      properties:
        stream_id:
          type: string
          description:
            A unique session UUID that can be used to retrieve recording URLs.
        playback_id:
          type: string
          description:
            A playback ID that can be used to retrieve recording URLs.
        unique_client_ips:
          type: number
          description: >-
            The number of unique client IP addresses. Note that StackPath zeroes
            out the last part of the IP address for privacy reasons.
        total_filesize:
          type: number
          description: The size of the asset being delivered.
        total_cs_bytes:
          type: number
          description: The total size of the request header.
        total_sc_bytes:
          type: number
          description: The total size of the response to the client.
        count:
          type: number
          description: The number of parsed log lines.
    cdn-data-payload:
      type: array
      description:
        An array of log data entries obtained from StackPath CDN logs.
      items:
        type: object
        additionalProperties: false
        required:
          - region
          - file_name
          - date
          - data
        properties:
          region:
            type: string
            description: The region where the log data was obtained from.
          file_name:
            type: string
            description: The name of the file containing the log data.
          date:
            type: number
            description: >-
              The date when the log data was obtained (in Unix timestamp
              format).
          data:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/cdn-data-row"
    cdn-usage-last:
      type: object
      description: >-
        This schema represents a record of the last CDN usage for a specific
        region and file name.
      required:
        - region
        - fileName
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          description: The unique identifier for this record.
        fileName:
          type: number
          description: The unique identifier of the file.
        region:
          type: string
          unique: true
          description: The region where the file is stored.
    webhook:
      type: object
      required:
        - name
        - url
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the webhook
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        kind:
          type: string
          description: 'The kind of object, always set to "webhook"'
          example: webhook
        name:
          type: string
          description: The name of the webhook
          example: my-webhook
        userId:
          type: string
          format: uuid
          description: The unique identifier of the user who created the webhook
        createdAt:
          type: integer
          description:
            The timestamp (in milliseconds) at which the webhook was created
          example: 1587667174725
        events:
          type: array
          description: The events that will trigger the webhook
          items:
            type: string
            enum:
              - stream.started
              - stream.detection
              - stream.idle
              - recording.ready
              - recording.started
              - multistream.connected
              - multistream.error
              - multistream.disconnected
              - playback.user.new
              - asset.created
              - asset.updated
              - asset.failed
              - asset.ready
              - asset.deleted
              - task.spawned
              - task.updated
              - task.completed
              - task.failed
        url:
          type: string
          format: uri
          pattern: "^http(s)?://"
          description: The URL to which the webhook will send its payloads
          example: "https://example.com/webhook"
        deleted:
          type: boolean
          description: A flag indicating whether the webhook has been deleted
          default: false
        sharedSecret:
          type: string
          description: The shared secret used to sign the webhook payload
          writeOnly: true
        streamId:
          type: string
          format: uuid
          description:
            The unique identifier of the stream on which the webhook is applied
        status:
          type: object
          description: The status of the webhook
          properties:
            lastFailure:
              type: object
              description: "The details of the last failure, if any"
              properties:
                timestamp:
                  type: integer
                  description: >-
                    The timestamp (in milliseconds) at which the last failure
                    occurred
                  example: 1587667174725
                error:
                  type: string
                  description:
                    The error message associated with the last failure
                  example: Error message
                response:
                  type: string
                  description:
                    The response body associated with the last failure
                  example: Response body
                statusCode:
                  type: integer
                  description: The status code associated with the last failure
                  example: 500
            lastTriggeredAt:
              type: integer
              description: >-
                The timestamp (in milliseconds) at which the webhook was last
                triggered
              example: 1587667174725
    webhook-response:
      type: object
      required:
        - webhookId
        - statusCode
      additionalProperties: false
      properties:
        id:
          type: string
          description: Unique identifier of the webhook response
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        kind:
          type: string
          description: Type of the response object
          example: webhookResponse
        webhookId:
          type: string
          description: Unique identifier of the associated webhook
        eventId:
          type: string
          description: Unique identifier of the associated event
        createdAt:
          type: number
          description: >-
            Timestamp (in milliseconds) at which the webhook response object was
            created
          example: 1587667174725
        duration:
          type: number
          description: Duration (in milliseconds) of the webhook response
        statusCode:
          type: number
          default: 0
          description: HTTP status code of the webhook response
        response:
          type: object
          additionalProperties: false
          description: HTTP response details of the webhook
          properties:
            body:
              type: string
              description: Body of the HTTP response
            headers:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              description: Headers of the HTTP response
            redirected:
              type: boolean
              description:
                Boolean indicating if the HTTP response was redirected
            status:
              type: number
              description: HTTP status code of the HTTP response
            statusText:
              type: string
              description: Status text of the HTTP response
    detection-webhook-payload:
      type: object
      required:
        - manifestID
        - seqNo
        - sceneClassification
      properties:
        manifestID:
          type: string
        seqNo:
          type: number
        sceneClassification:
          type: array
          items:
            type: object
            required:
              - name
              - probability
            properties:
              name:
                type: string
              probability:
                type: number
    stream:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        id:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        kind:
          type: string
          example: stream
        name:
          type: string
          example: test_stream
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
        lastSeen:
          type: number
          example: 1587667174725
        sourceSegments:
          type: number
          example: 1
        transcodedSegments:
          type: number
          example: 2
        sourceSegmentsDuration:
          type: number
          example: 1
          description: "Duration of all the source segments, sec"
        transcodedSegmentsDuration:
          type: number
          example: 2
          description: "Duration of all the transcoded segments, sec"
        sourceBytes:
          type: number
          example: 1
        transcodedBytes:
          type: number
          example: 2
        ingestRate:
          type: number
          example: 1
          description: Rate at which sourceBytes increases (bytes/second)
        outgoingRate:
          type: number
          example: 2
          description: Rate at which transcodedBytes increases (bytes/second)
        deleted:
          type: boolean
          description: Set to true when stream deleted
        isActive:
          type: boolean
          description: If currently active
        createdByTokenName:
          type: string
          description: Name of the token used to create this object
        createdByTokenId:
          type: string
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
        parentId:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          description: Points to parent stream object
        partialSession:
          description:
            Indicates that this is not final object of `user's` session
          type: boolean
        previousSessions:
          description:
            Ids of the previous sessions which are part of `user's` session
          type: array
          items:
            type: string
        streamKey:
          type: string
          example: hgebdhhigq
          description: Used to form RTMP ingest URL
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        profiles:
          type: array
          default:
            - name: 240p0
              fps: 0
              bitrate: 250000
              width: 426
              height: 240
            - name: 360p0
              fps: 0
              bitrate: 800000
              width: 640
              height: 360
            - name: 480p0
              fps: 0
              bitrate: 1600000
              width: 854
              height: 480
            - name: 720p0
              fps: 0
              bitrate: 3000000
              width: 1280
              height: 720
          items:
            $ref: "#/components/schemas/ffmpeg-profile"
        objectStoreId:
          type: string
          example: D8321C3E-B29C-45EB-A1BB-A623D8BE0F65
        presets:
          type: array
          items:
            type: string
            enum:
              - P720p60fps16x9
              - P720p30fps16x9
              - P720p30fps4x3
              - P576p30fps16x9
              - P360p30fps16x9
              - P360p30fps4x3
              - P240p30fps16x9
              - P240p30fps4x3
              - P144p30fps16x9
            example: P720p60fps16x9
        record:
          description: >-
            Should this stream be recorded? Uses default settings. For more
            customization, create and configure an object store.
          type: boolean
          example: false
        recordObjectStoreId:
          type: string
          example: D8321C3E-B29C-45EB-A1BB-A623D8BE0F65
          description:
            ID of object store where to which this stream was recorded
        multistream:
          type: object
          additionalProperties: false
          properties:
            targets:
              type: array
              example:
                - id: PUSH123
                  profile: 720p
              description: >-
                References to targets where this stream will be simultaneously
                streamed to
              items:
                type: object
                required:
                  - profile
                additionalProperties: false
                properties:
                  profile:
                    type: string
                    description: >-
                      Name of transcoding profile that should be sent. Use
                      "source" for pushing source stream data
                    minLength: 1
                    maxLength: 500
                    example: 720p
                  videoOnly:
                    type: boolean
                    description: >-
                      If true, the stream audio will be muted and only silent
                      video will be pushed to the target.
                    default: false
                  id:
                    type: string
                    description:
                      ID of multistream target object where to push this stream
                  spec:
                    type: object
                    writeOnly: true
                    description: >-
                      Inline multistream target object. Will automatically
                      create the target resource to be used by the created
                      stream.
                    required:
                      - url
                    additionalProperties: false
                    properties:
                      name:
                        type: string
                      url:
                        $ref: "#/components/schemas/multistream-target/properties/url"
        wowza:
          type: object
          required:
            - transcoderAppConfig
            - transcoderTemplateAppConfig
            - streamNameGroups
            - sourceInfo
          additionalProperties: false
          properties:
            transcoderAppConfig:
              type: object
            transcoderTemplateAppConfig:
              type: object
            streamNameGroups:
              type: array
              items: #test
                type: object

            sourceInfo:
              type: object
              required:
                - width
                - height
                - fps
              additionalProperties: false
              properties:
                width:
                  type: integer
                height:
                  type: integer
                fps:
                  type: integer
        renditions:
          type: object
          additionalProperties:
            type: string
        detection:
          type: object
          description: >-
            Custom configuration for audio/video detection algorithms to be run
            on the stream. If no config is provided and a webhook is subscribed
            to the stream.detection event, a default config will be used.
          default:
            sceneClassification:
              - name: soccer
              - name: adult
          required:
            - sceneClassification
          additionalProperties: false
          properties:
            sceneClassification:
              type: array
              minItems: 1
              items:
                type: object
                description: >-
                  Scene classification options. Must contain name property with
                  one of the well-defined classes supported by detection models.
                additionalProperties: false
                required:
                  - name
                properties:
                  name:
                    type: string
                    enum:
                      - soccer
                      - adult
        region:
          type: string
          example: fra
          description: Region in which this session object was created
        broadcasterHost:
          type: string
          description: Hostname of the broadcaster that transcodes that stream
        mistHost:
          type: string
          description: Hostname of the Mist server that processes that stream
        suspended:
          type: boolean
          description: If currently suspended
    deactivate-many-payload:
      type: object
      additionalProperties: false
      properties:
        ids:
          type: array
          minItems: 1
          items:
            type: string
    stream-set-active-payload:
      type: object
      required:
        - active
      properties:
        active:
          $ref: "#/components/schemas/stream/properties/isActive"
        hostName:
          $ref: "#/components/schemas/stream/properties/mistHost"
        startedAt:
          type: number
          description: Timestamp (in milliseconds) at which the stream started.
          example: 1587667174725
    asset-patch-payload:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/asset/properties/name"
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        storage:
          $ref: "#/components/schemas/new-asset-payload/properties/storage"
    stream-patch-payload:
      type: object
      additionalProperties: false
      properties:
        record:
          $ref: "#/components/schemas/stream/properties/record"
        suspended:
          $ref: "#/components/schemas/stream/properties/suspended"
        multistream:
          $ref: "#/components/schemas/stream/properties/multistream"
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
    object-store-patch-payload:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/object-store/properties/name"
        disabled:
          $ref: "#/components/schemas/object-store/properties/disabled"
        url:
          $ref: "#/components/schemas/object-store/properties/url"
        publicUrl:
          $ref: "#/components/schemas/object-store/properties/publicUrl"
    suspend-user-payload:
      type: object
      additionalProperties: false
      required:
        - suspended
      properties:
        suspended:
          $ref: "#/components/schemas/user/properties/suspended"
        emailTemplate:
          type: string
          description:
            Name of template to send to the users regarding the suspension.
          enum:
            - copyright
    multistream-target-patch-payload:
      $ref: "#/components/schemas/multistream-target"
    signing-key-patch-payload:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/signing-key/properties/name"
        disabled:
          $ref: "#/components/schemas/signing-key/properties/disabled"
    webhook-patch-payload:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/webhook/properties/name"
        url:
          $ref: "#/components/schemas/webhook/properties/url"
        events:
          $ref: "#/components/schemas/webhook/properties/events"
        sharedSecret:
          $ref: "#/components/schemas/webhook/properties/sharedSecret"
        streamId:
          $ref: "#/components/schemas/webhook/properties/streamId"
    webhook-status-payload:
      type: object
      additionalProperties: false
      properties:
        errorMessage:
          type: string
          description: Error message if the webhook failed to process the event
        response:
          $ref: "#/components/schemas/webhook-response"
    access-control-gate-payload:
      type: object
      additionalProperties: false
      required:
        - type
        - stream
      properties:
        type:
          type: string
          enum:
            - jwt
        stream:
          type: string
          description: Stream ID to which this gate applies
        pub:
          type: string
          description: Base64 of Public key used for JWT verification
    experiment-audience-payload:
      type: object
      additionalProperties: false
      properties:
        addUsers:
          type: array
          items:
            type: string
            description:
              Email or ID of users that should be added to the experiment
        removeUsers:
          type: array
          items:
            type: string
            description:
              Email or ID of users that should be removed from the experiment
    playback-policy:
      type: object
      description:
        Whether the playback policy for a asset or stream is public or signed
      additionalProperties: false
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - public
            - jwt
            - lit_signing_condition
        unifiedAccessControlConditions:
          type: array
          description: LIT Unified Access Control Conditions
          items:
            type: object
        resourceId:
          type: object
          description: LIT Resource ID
          additionalProperties: false
          required:
            - baseUrl
            - path
            - orgId
            - role
            - extraData
          properties:
            baseUrl:
              type: string
            path:
              type: string
            orgId:
              type: string
            role:
              type: string
            extraData:
              type: string
    session:
      type: object
      required:
        - name
        - streamId
      additionalProperties: false
      properties:
        id:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        kind:
          type: string
          example: stream
        name:
          type: string
          example: test_session
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
        lastSeen:
          type: number
          example: 1587667174725
        sourceSegments:
          type: number
          example: 1
        transcodedSegments:
          type: number
          example: 2
        sourceSegmentsDuration:
          type: number
          example: 1
          description: "Duration of all the source segments, sec"
        transcodedSegmentsDuration:
          type: number
          example: 2
          description: "Duration of all the transcoded segments, sec"
        sourceBytes:
          type: number
          example: 1
        transcodedBytes:
          type: number
          example: 2
        ingestRate:
          type: number
          example: 1
          description: Rate at which sourceBytes increases (bytes/second)
        outgoingRate:
          type: number
          example: 2
          description: Rate at which transcodedBytes increases (bytes/second)
        deleted:
          type: boolean
          description: Set to true when stream deleted
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
        parentId:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          description: Points to parent stream object
        record:
          description: >-
            Should this stream be recorded? Uses default settings. For more
            customization, create and configure an object store.
          type: boolean
          example: false
        recordingStatus:
          type: string
          description: Status of the recording process of this stream session.
          enum:
            - waiting
            - ready
        recordingUrl:
          type: string
          description: URL for accessing the recording of this stream session.
        mp4Url:
          type: string
          description: URL for the stream session recording packaged in an mp4.
        recordObjectStoreId:
          type: string
          example: D8321C3E-B29C-45EB-A1BB-A623D8BE0F65
          description:
            ID of object store where to which this stream was recorded
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/ffmpeg-profile"
        lastSessionId:
          type: string
    error:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          minItems: 1
          items:
            type: string
            example:
              - id not provided
              - user not found
    object-store:
      type: object
      required:
        - url
      additionalProperties: false
      properties:
        url:
          type: string
          description: Livepeer-compatible object store URL
          example: "s3://access-key:secret-key@us-west-2/bucket-name"
          writeOnly: true
        publicUrl:
          type: string
          description:
            Public URL at which data in this object storage can be accessed
          example: "https://reg-rec.livepeer.live/some/path"
        disabled:
          type: boolean
          description: >-
            If true then these object store will not be used for recording even
            if it is configured in the API command line.
        deleted:
          type: boolean
          description: Set to true when the object store is deleted
        id:
          type: string
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
        name:
          type: string
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which object store object was created
          example: 1587667174725
    multistream-target:
      type: object
      required:
        - url
      additionalProperties: false
      properties:
        id:
          type: string
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        name:
          type: string
        url:
          type: string
          writeOnly: true
          description:
            Livepeer-compatible multistream target URL (RTMP(S) or SRT)
          example: "rtmps://live.my-service.tv/channel/secretKey"
          format: uri
          pattern: "^(srt|rtmps?)://"
        disabled:
          type: boolean
          description: >-
            If true then this multistream target will not be used for pushing
            even if it is configured in a stream object.
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
        createdAt:
          type: number
          description: >-
            Timestamp (in milliseconds) at which multistream target object was
            created
          example: 1587667174725
    asset:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - source
      properties:
        id:
          type: string
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        type:
          type: string
          enum:
            - video
            - audio
          description: Type of the asset.
          example: video
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL and storage folder
        playbackRecordingId:
          type: string
          writeOnly: true
          example: ea03f37e-f861-4cdd-b495-0e60b6d753ad
          description: Used to form recording URL for HLS playback
        staticMp4:
          type: boolean
          writeOnly: true
          description: Whether to generate MP4s for the asset.
        files:
          type: array
          writeOnly: true
          description:
            Internal field with the list of files stored in the object store
          items:
            type: object
            additionalProperties: false
            required:
              - type
              - path
            properties:
              type:
                type: string
                example: catalyst_hls_manifest
                description: Type of the file in the VOD system.
              path:
                type: string
                example: /path/to/file
                description: >-
                  Path to the file in the asset subfolder in the object store.
                  This means that all these paths are relative to a folder in
                  the OS the asset playback ID as the name.
              spec:
                type: object
                additionalProperties: false
                description: >-
                  Additional information about the file. For example, for
                  manifests it contains the list of media files.
                properties:
                  size:
                    type: number
                    example: 123456
                    description: Size of the file in bytes.
                  height:
                    type: number
                    example: 1080
                    description: Height of the video in pixels.
                  width:
                    type: number
                    example: 1920
                    description: Width of the video in pixels.
                  bitrate:
                    type: number
                    example: 1000000
                    description: Bitrate of the video in bits per second.
        playbackUrl:
          type: string
          example: >-
            https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8
          description: URL for HLS playback
        downloadUrl:
          type: string
          example: "https://livepeercdn.com/asset/eaw4nk06ts2d0mzb/video"
          description: URL to manually download the asset if desired
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
          description: owner of the asset
        deleted:
          type: boolean
          description: Set to true when the asset is deleted
        objectStoreId:
          type: string
          description: Object store ID where the asset is stored
          writeOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        source:
          oneOf:
            - additionalProperties: false
              required:
                - type
                - url
              properties:
                type:
                  type: string
                  enum:
                    - url
                url:
                  type: string
                  description: URL from which the asset was uploaded
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
            - additionalProperties: false
              required:
                - type
              properties:
                type:
                  type: string
                  enum:
                    - directUpload
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
            - additionalProperties: false
              required:
                - type
                - sessionId
              properties:
                type:
                  type: string
                  enum:
                    - recording
                sessionId:
                  type: string
                  description:
                    ID of the session from which this asset was created
            - additionalProperties: false
              required:
                - type
                - inputAssetId
              properties:
                type:
                  type: string
                  enum:
                    - transcode
                inputAssetId:
                  type: string
                  description: >-
                    ID of the source asset that was processed by a transcode
                    task to create this asset
        storage:
          additionalProperties: false
          properties:
            ipfs:
              type: object
              additionalProperties: false
              properties:
                spec:
                  type: object
                  additionalProperties: false
                  default: {}
                  properties:
                    nftMetadataTemplate:
                      type: string
                      enum:
                        - file
                        - player
                      default: file
                      description: >-
                        Name of the NFT metadata template to export. 'player'
                        will embed the Livepeer Player on the NFT while 'file'
                        will reference only the immutable MP4 files.
                    nftMetadata:
                      type: object
                      description: >-
                        Additional data to add to the NFT metadata exported to
                        IPFS. Will be deep merged with the default metadata
                        exported.

                nftMetadata:
                  $ref: "#/components/schemas/ipfs-file-info"
                updatedAt:
                  type: number
                  description: >-
                    Timestamp (in milliseconds) at which IPFS export task was
                    updated
                  example: 1587667174725
            status:
              additionalProperties: false
              required:
                - phase
                - tasks
              properties:
                phase:
                  type: string
                  description: Phase of the asset storage
                  enum:
                    - waiting
                    - processing
                    - ready
                    - failed
                    - reverted
                progress:
                  type: number
                  description:
                    Current progress of the task updating the storage.
                errorMessage:
                  type: string
                  description: Error message if the last storage changed failed.
                tasks:
                  type: object
                  additionalProperties: false
                  properties:
                    pending:
                      type: string
                      description: >-
                        ID of any currently running task that is exporting this
                        asset to IPFS.
                    last:
                      type: string
                      description: >-
                        ID of the last task to run successfully, that created
                        the currently saved data.
                    failed:
                      type: string
                      description: ID of the last task to fail execution.
        status:
          type: object
          additionalProperties: false
          required:
            - phase
            - updatedAt
          description: Status of the asset
          properties:
            phase:
              type: string
              description: Phase of the asset
              enum:
                - waiting
                - processing
                - ready
                - failed
            updatedAt:
              type: number
              description:
                Timestamp (in milliseconds) at which the asset was last updated
              example: 1587667174725
            progress:
              type: number
              description: Current progress of the task creating this asset.
            errorMessage:
              type: string
              description: Error message if the asset creation failed.
        name:
          type: string
          description: >-
            Name of the asset. This is not necessarily the filename, can be a
            custom name or title
          example: filename.mp4
        createdAt:
          type: number
          description: Timestamp (in milliseconds) at which asset was created
          example: 1587667174725
        size:
          type: number
          description: Size of the asset in bytes
          example: 84934509
        hash:
          type: array
          description: Hash of the asset
          items:
            type: object
            additionalProperties: false
            properties:
              hash:
                type: string
                description: Hash of the asset
                example: >-
                  9b560b28b85378a5004117539196ab24e21bbd75b0e9eb1a8bc7c5fd80dc5b57
              algorithm:
                type: string
                description: Hash algorithm used to compute the hash
                example: sha256
        videoSpec:
          type: object
          additionalProperties: false
          description: Video metadata
          properties:
            format:
              type: string
              description: Format of the asset
              example: mp4
            duration:
              type: number
              description: Duration of the asset in seconds (float)
              example: 23.8328
            bitrate:
              type: number
              description: Bitrate of the video in bits per second
              example: 1000000
            tracks:
              type: array
              description: >-
                List of tracks associated with the asset when the format
                contemplates them (e.g. mp4)
              items:
                type: object
                additionalProperties: false
                required:
                  - type
                  - codec
                properties:
                  type:
                    type: string
                    description: type of track
                    enum:
                      - video
                      - audio
                    example: video
                  codec:
                    type: string
                    description: Codec of the track
                    example: aac
                  startTime:
                    type: number
                    description: Start time of the track in seconds
                    example: 23.8238
                  duration:
                    type: number
                    description: Duration of the track in seconds
                    example: 23.8238
                  bitrate:
                    type: number
                    description: Bitrate of the track in bits per second
                    example: 1000000
                  width:
                    type: number
                    description: Width of the track - only for video tracks
                    example: 1920
                  height:
                    type: number
                    description: Height of the track - only for video tracks
                    example: 1080
                  pixelFormat:
                    type: string
                    description:
                      Pixel format of the track - only for video tracks
                    example: yuv420p
                  fps:
                    type: number
                    description: Frame rate of the track - only for video tracks
                    example: 30
                  channels:
                    type: number
                    description: Amount of audio channels in the track
                    example: 2
                  sampleRate:
                    type: number
                    description: >-
                      Sample rate of the track in samples per second - only for
                      audio tracks
                    example: 44100
                  bitDepth:
                    type: number
                    description: Bit depth of the track - only for audio tracks
                    example: 16
        sourceAssetId:
          type: string
          description:
            "ID of the source asset (root) - If missing, this is a root asset"
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
    ipfs-file-info:
      type: object
      required:
        - cid
      additionalProperties: false
      properties:
        cid:
          type: string
          description: CID of the file on IPFS
        url:
          type: string
          description: URL with IPFS scheme for the file
        gatewayUrl:
          type: string
          description: URL to access file via HTTP through an IPFS gateway
    new-signing-key-payload:
      additionalProperties: false
      properties:
        name:
          type: string
          description: Name of the signing key
    new-asset-payload:
      additionalProperties: false
      required:
        - name
      properties:
        objectStoreId:
          type: string
          description: Object store ID where the asset is stored
          writeOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        name:
          type: string
          description: >-
            Name of the asset. This is not necessarily the filename, can be a
            custom name or title
          example: filename.mp4
        staticMp4:
          type: boolean
          description: Whether to generate MP4s for the asset.
          example: true
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        storage:
          additionalProperties: false
          properties:
            ipfs:
              oneOf:
                - type: object
                  additionalProperties: false

                - type: boolean
                  description: >-
                    Set to true to make default export to IPFS. False or null
                    means to unpin from IPFS, but is unsupported right now.
        url:
          type: string
          format: uri
          pattern: "^(https?|ipfs|ar)://"
          description: >-
            URL where the asset contents can be retrieved. Only valid for the
            import task endpoint.
          example: "https://s3.amazonaws.com/my-bucket/path/filename.mp4"
        encryption:
          type: object
          additionalProperties: false
          required:
            - key
          properties:
            key:
              type: string
              writeOnly: true
              description: >-
                Encryption key used to encrypt the asset encoded in base16. Only
                writable in the upload asset endpoints and cannot be retrieved
                back.
              example: 74686973206d65616e73206e6f7468696e672120676f2061776179206672656e
            algorithm:
              type: string
              description: >-
                Encryption algorithm used to encrypt the asset, defaults to AES
                in CBC block cipher mode.
              enum:
                - aes-cbc
              default: aes-cbc
        catalystPipelineStrategy:
          $ref: >-
            #/components/schemas/task/properties/params/properties/upload/properties/catalystPipelineStrategy
    transcode-asset-payload:
      additionalProperties: false
      required:
        - name
        - profile
      properties:
        assetId:
          type: string
          description: ID of the asset to transcode
        objectStoreId:
          type: string
          description: Object store ID where the asset is stored
          writeOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        name:
          type: string
          description: >-
            Name of the asset. This is not necessarily the filename, can be a
            custom name or title
          example: filename.mp4
        profile:
          $ref: "#/components/schemas/ffmpeg-profile"
    transcode-payload:
      additionalProperties: false
      required:
        - input
        - storage
        - outputs
      properties:
        input:
          oneOf:
            - type: object
              additionalProperties: false
              description: URL input video
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  pattern: "^(https?|ipfs|ar)://"
                  description: URL of the video to transcode
                  example: "https://s3.amazonaws.com/bucket/file.mp4"
            - type: object
              additionalProperties: false
              description: S3-like storage input video
              required:
                - type
                - endpoint
                - bucket
                - path
                - credentials
              properties:
                type:
                  type: string
                  enum:
                    - s3
                  description: >-
                    Type of service. This is optional and defaults to `url` if
                    ŚURL field is provided.
                endpoint:
                  type: string
                  format: uri
                  pattern: "^http(s)?://"
                  description: Service endpoint URL
                  example: "https://gateway.storjshare.io"
                bucket:
                  type: string
                  description: Bucket with input file
                  example: inputbucket
                path:
                  type: string
                  description: Path to the input file inside the bucket
                  example: /path/file.mp4
                credentials:
                  type: object
                  additionalProperties: false
                  required:
                    - accessKeyId
                    - secretAccessKey
                  description: Credentials for the private input video storage
                  properties:
                    accessKeyId:
                      type: string
                      description: Access Key ID
                      example: AKIAIOSFODNN7EXAMPLE
                    secretAccessKey:
                      type: string
                      description: Secret Access Key
                      example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
        storage:
          oneOf:
            - type: object
              additionalProperties: false
              required:
                - type
                - endpoint
                - bucket
                - credentials
              description: Storage for the output files
              properties:
                type:
                  type: string
                  enum:
                    - s3
                  description: Type of service used for output files
                endpoint:
                  type: string
                  format: uri
                  pattern: "^http(s)?://"
                  description: Service endpoint URL
                  example: "https://gateway.storjshare.io"
                bucket:
                  type: string
                  description: Bucket with output files
                  example: outputbucket
                credentials:
                  type: object
                  additionalProperties: false
                  required:
                    - accessKeyId
                    - secretAccessKey
                  description: Credentials for the output video storage
                  properties:
                    accessKeyId:
                      type: string
                      description: Access Key ID
                      example: AKIAIOSFODNN7EXAMPLE
                    secretAccessKey:
                      type: string
                      description: Secret Access Key
                      example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            - type: object
              additionalProperties: false
              required:
                - type
                - credentials
              description: Storage for the output files
              properties:
                type:
                  type: string
                  enum:
                    - web3.storage
                  description: Type of service used for output files
                credentials:
                  type: object
                  additionalProperties: false
                  required:
                    - proof
                  description: >-
                    Delegation proof for Livepeer to be able to upload to
                    web3.storage
                  properties:
                    proof:
                      type: string
                      description: Base64 encoded UCAN delegation proof
                      example: >-
                        EaJlcm9vdHOAZ3ZlcnNpb24BmgIBcRIg2uxHpcPYSWNtifMKFkPC7IEDvFDCxCd3ADViv0coV7SnYXNYRO2hA0AnblHEW38s3lSlcwaDjPn
        outputs:
          type: object
          additionalProperties: false
          required:
            - hls
          description: Output formats
          properties:
            hls:
              type: object
              additionalProperties: false
              required:
                - path
              description: HLS output format
              properties:
                path:
                  type: string
                  description: Path for the HLS output
                  example: /samplevideo/hls
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/ffmpeg-profile"
        targetSegmentSizeSecs:
          type: number
          description:
            How many seconds the duration of each output segment should be
        catalystPipelineStrategy:
          $ref: >-
            #/components/schemas/task/properties/params/properties/upload/properties/catalystPipelineStrategy
    task:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: Task ID
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        userId:
          type: string
          description: User ID of the task owner
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
        type:
          type: string
          description: Type of the task
          enum:
            - upload
            - import
            - export
            - transcode
            - transcode-file
        createdAt:
          type: number
          description: Timestamp (in milliseconds) at which task was created
          example: 1587667174725
        deleted:
          type: boolean
          description: Set to true when the task is deleted
        inputAssetId:
          type: string
          description: ID of the input asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        outputAssetId:
          type: string
          description: ID of the output asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        params:
          type: object
          additionalProperties: false
          description: Parameters of the task
          properties:
            upload:
              type: object
              additionalProperties: false
              description: Parameters for the upload task
              properties:
                url:
                  type: string
                  description: URL of the asset to "upload"
                  example: "https://cdn.livepeer.com/ABC123/filename.mp4"
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
                recordedSessionId:
                  type: string
                  description: >-
                    ID of the original recorded session to avoid re-transcoding
                    of the same content. Only used for import task.
                  example: 78df0075-b5f3-4683-a618-1086faca35dc
                uploadedObjectKey:
                  type: string
                  description: S3 object key of the uploaded asset
                  example: ABC123/filename.mp4
                catalystPipelineStrategy:
                  type: string
                  description: >-
                    Force to use a specific strategy in the Catalyst pipeline.
                    If not specified, the default strategy that Catalyst is
                    configured for will be used. This field only available for
                    admin users, and is only used for E2E testing.
                  enum:
                    - catalyst
                    - background_external
                    - background_mist
                    - fallback_external
                    - external
            import:
              $ref: "#/components/schemas/task/properties/params/properties/upload"
            export:
              $ref: "#/components/schemas/export-task-params"
            transcode:
              type: object
              additionalProperties: false
              description: Parameters for the transcode task
              properties:
                profile:
                  $ref: "#/components/schemas/ffmpeg-profile"
            transcode-file:
              type: object
              additionalProperties: false
              description: Parameters for the transcode-file task
              properties:
                input:
                  type: object
                  additionalProperties: false
                  description: Input video file to transcode
                  properties:
                    url:
                      type: string
                      description: >-
                        URL of a video to transcode, accepts object-store format
                        "s3+https"
                      example: "https://cdn.livepeer.com/ABC123/filename.mp4"
                storage:
                  type: object
                  additionalProperties: false
                  description: Storage for the output files
                  properties:
                    url:
                      type: string
                      description: >-
                        URL of the output storage, accepts object-store format
                        "s3+https"
                      example: "s3+https://accessKeyId:secretAccessKey@s3Endpoint/bucket"
                outputs:
                  type: object
                  additionalProperties: false
                  description: Output formats
                  properties:
                    hls:
                      type: object
                      additionalProperties: false
                      description: HLS output format
                      properties:
                        path:
                          type: string
                          description: Path for the HLS output
                          example: /samplevideo/hls
                profiles:
                  type: array
                  items:
                    $ref: "#/components/schemas/ffmpeg-profile"
                targetSegmentSizeSecs:
                  type: number
                  description: >-
                    How many seconds the duration of each output segment should
                    be
                catalystPipelineStrategy:
                  type: string
                  description: >-
                    Force to use a specific strategy in the Catalyst pipeline.
                    If not specified, the default strategy that Catalyst is
                    configured for will be used. This field only available for
                    admin users, and is only used for E2E testing.
                  enum:
                    - catalyst
                    - background_external
                    - background_mist
                    - fallback_external
                    - external
        status:
          type: object
          additionalProperties: false
          description: Status of the task
          required:
            - phase
            - updatedAt
          properties:
            phase:
              type: string
              description: Phase of the task
              enum:
                - pending
                - waiting
                - running
                - failed
                - completed
                - cancelled
            updatedAt:
              type: number
              description: Timestamp (in milliseconds) at which task was updated
              example: 1587667174725
            progress:
              type: number
              description: Current progress of the task in a 0-1 ratio
            errorMessage:
              type: string
              description: Error message if the task failed
            retries:
              type: number
              description: Number of retries done on the task
            step:
              type: string
              writeOnly: true
              description: Step of the task processing
        output:
          type: object
          additionalProperties: false
          description: Output of the task
          properties:
            upload:
              type: object
              additionalProperties: true
              description: Output of the upload task
              properties:
                videoFilePath:
                  type: string
                  writeOnly: true
                metadataFilePath:
                  type: string
                  writeOnly: true
                assetSpec:
                  $ref: "#/components/schemas/asset"
            import:
              $ref: "#/components/schemas/task/properties/output/properties/upload"
            export:
              type: object
              additionalProperties: false
              description: Output of the export task
              properties:
                internal:
                  writeOnly: true
                  description: |
                    Internal data of the export task that should not be returned
                    to users. Contains internal tracking information like which
                    service was used for the export in case it is maintained by
                    us (e.g. the first-party piñata service).
                ipfs:
                  type: object
                  additionalProperties: false
                  required:
                    - videoFileCid
                  properties:
                    videoFileCid:
                      type: string
                      description: IPFS CID of the exported video file
                    videoFileUrl:
                      type: string
                      description: URL for the file with the IPFS protocol
                    videoFileGatewayUrl:
                      type: string
                      description:
                        URL to access file via HTTP through an IPFS gateway
                    nftMetadataCid:
                      type: string
                      description:
                        IPFS CID of the default metadata exported for the video
                    nftMetadataUrl:
                      type: string
                      description:
                        URL for the metadata file with the IPFS protocol
                    nftMetadataGatewayUrl:
                      type: string
                      description: >-
                        URL to access metadata file via HTTP through an IPFS
                        gateway
            transcode:
              type: object
              additionalProperties: false
              properties:
                asset:
                  type: object
                  additionalProperties: true
                  properties:
                    videoFilePath:
                      type: string
                    metadataFilePath:
                      type: string
                    assetSpec:
                      type: object
                      $ref: "#/components/schemas/asset"
    export-task-params:
      description: Parameters for the export task
      oneOf:
        - type: object
          additionalProperties: false
          required:
            - custom
          properties:
            custom:
              type: object
              description: custom URL parameters for the export task
              additionalProperties: false
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  pattern: "^http(s)?://"
                  description: URL where to export the asset
                  example: >-
                    https://s3.amazonaws.com/my-bucket/path/filename.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=LLMMB
                method:
                  type: string
                  description: Method to use on the export request
                  default: PUT
                headers:
                  type: object
                  description: Headers to add to the export request
                  additionalProperties:
                    type: string
        - type: object
          additionalProperties: false
          required:
            - ipfs
          properties:
            ipfs:
              type: object
              additionalProperties: false
              properties:
                pinata:
                  description: >-
                    Custom credentials for the Piñata service. Must have either
                    a JWT or an API key and an API secret.
                  oneOf:
                    - type: object
                      additionalProperties: false
                      required:
                        - jwt
                      properties:
                        jwt:
                          type: string
                          writeOnly: true
                          description: >-
                            Will be added to the Authorization header as a
                            Bearer token.
                    - type: object
                      additionalProperties: false
                      required:
                        - apiKey
                        - apiSecret
                      properties:
                        apiKey:
                          type: string
                          description:
                            Will be added to the pinata_api_key header.
                        apiSecret:
                          type: string
                          writeOnly: true
                          description:
                            Will be added to the pinata_secret_api_key header.
    signing-key:
      type: object
      additionalProperties: false
      required:
        - publicKey
      properties:
        id:
          type: string
          example: 78df0075-b5f3-4683-a618-1086faca35dc
        name:
          type: string
          description: Name of the signing key
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which the signing-key was created
          example: 1587667174725
        lastSeen:
          type: number
          description:
            Timestamp (in milliseconds) at which the signing-key was last used
          example: 1587667174725
        userId:
          type: string
          example: 78df0075-b5f3-4683-a618-1086faca35dc
        publicKey:
          type: string
        deleted:
          type: boolean
          default: false
        disabled:
          type: boolean
          description: Disable the signing key to allow rotation safely
    signing-key-response-payload:
      type: object
      required:
        - publicKey
        - privateKey
      properties:
        signing-key:
          type: object
          $ref: "#/components/schemas/signing-key"
        privateKey:
          type: string
          description: The private key associated with the signing key.
    api-token:
      type: object
      additionalProperties: false
      properties:
        kind:
          type: string
          example: user
        id:
          type: string
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
        name:
          type: string
          example: Example Token
        access:
          type: object
          additionalProperties: false
          properties:
            cors:
              type: object
              additionalProperties: false
              properties:
                fullAccess:
                  type: boolean
                  description: >-
                    Whether the token grants full access to the API. If false,
                    the token will only have access to some pre-defined
                    endpoints, not expose the whole account from the webpage.
                  default: false
                allowedOrigins:
                  type: array
                  description: >-
                    Origins from which the token can be used. If empty, CORS
                    will be prohibited by default (safest). To allow all origin
                    values set this to `[*]`.
                  default: []
                  items:
                    type: string
                    example: "https://example.com"
            rules:
              type: array
              default:
                - resources:
                    - "*"
              items:
                type: object
                additionalProperties: false
                required:
                  - resources
                properties:
                  resources:
                    type: array
                    minItems: 1
                    items:
                      type: string
                  methods:
                    type: array
                    minItems: 1
                    default:
                      - "*"
                    items:
                      type: string
                      enum:
                        - post
                        - get
                        - put
                        - patch
                        - delete
                        - head
                        - options
                        - "*"
        lastSeen:
          type: number
          example: 1587667174725
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which token object was created
          example: 1587667174725
    user-verification:
      type: object
      required:
        - email
        - emailValidToken
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: john.doe@gmail.com
        emailValidToken:
          type: string
          example: E1F53135E559C253
          writeOnly: true
    verify-email:
      type: object
      required:
        - email
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: john.doe@gmail.com
    make-admin:
      type: object
      required:
        - email
        - admin
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: john.doe@gmail.com
        admin:
          type: boolean
          example: true
    password-reset-token:
      type: object
      required:
        - kind
        - userId
        - resetToken
        - expiration
      additionalProperties: false
      properties:
        kind:
          type: string
          enum:
            - password-reset-token
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
        resetToken:
          type: string
          example: E1F53135E559C253
          writeOnly: true
        expiration:
          type: number
          description:
            Timestamp (in milliseconds) at which reset token will be expired
          example: 1587667174725
    password-reset-token-request:
      type: object
      required:
        - email
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: john.doe@gmail.com
    password-reset-confirm:
      type: object
      required:
        - email
        - resetToken
        - password
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: john.doe@gmail.com
        resetToken:
          type: string
          example: E1F53135E559C253
          writeOnly: true
        password:
          type: string
          example: thisisapassword
          minLength: 64
          maxLength: 64
        userId:
          type: string
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
    create-customer:
      type: object
      required:
        - email
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: john.doe@gmail.com
    create-subscription:
      type: object
      required:
        - stripeCustomerId
        - stripeProductId
      additionalProperties: false
      properties:
        stripeCustomerId:
          type: string
          description: stripe customer id
          example: cus_xxxxxxxxxxxxxx
        stripeCustomerPaymentMethodId:
          type: string
          description: stripe payment method id
          example: src_xxxxxxxxxxxxxxxxxxxxxxxx
        stripeProductId:
          type: string
          description: stripe product id
          enum:
            - prod_0
            - prod_1
            - prod_2
    update-subscription:
      type: object
      required:
        - stripeCustomerId
        - stripeProductId
      additionalProperties: false
      properties:
        stripeCustomerId:
          type: string
          description: stripe customer id
          example: cus_xxxxxxxxxxxxxx
        stripeCustomerSubscriptionId:
          type: string
          description: stripe subscription id
          example: sub_xxxxxxxxxxxxxx
        stripeCustomerPaymentMethodId:
          type: string
          description: stripe payment method id
          example: pm_xxxxxxxxxxxxxxxxxxxxxxxx
        stripeProductId:
          type: string
          description: stripe product id
          enum:
            - prod_0
            - prod_1
            - prod_2
    update-customer-payment-method:
      type: object
      required:
        - stripeCustomerId
        - stripeCustomerPaymentMethodId
      additionalProperties: false
      properties:
        stripeCustomerId:
          type: string
          description: stripe customer id
          example: cus_xxxxxxxxxxxxxx
        stripeCustomerPaymentMethodId:
          type: string
          description: stripe payment method id
          example: pm_xxxxxxxxxxxxxxxxxxxxxxxx
    retrieve-customer-payment-method:
      type: object
      required:
        - stripeCustomerPaymentMethodId
      additionalProperties: false
      properties:
        stripeCustomerPaymentMethodId:
          type: string
          description: stripe payment method id
          example: src_xxxxxxxxxxxxxxxxxxxxxxxx
    region:
      type: object
      required:
        - region
        - orchestrators
      properties:
        region:
          type: string
          description: region name
          example: ber
        orchestrators:
          type: array
          items:
            type: object
            additionalProperties: false
            required:
              - address
            properties:
              address:
                type: string
    user:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: john.doe@gmail.com
        password:
          type: string
          example: thisisapassword
          minLength: 64
          maxLength: 64
          writeOnly: true
        emailValidToken:
          type: string
          example: E1F53135E559C253
          writeOnly: true
        emailValid:
          type: boolean
          example: true
        suspended:
          type: boolean
        salt:
          type: string
          example: E1F53135E559C253
          writeOnly: true
        admin:
          type: boolean
          example: true
        kind:
          type: string
          example: user
        id:
          type: string
          example: abc123
        firstName:
          type: string
          example: Joe
        lastName:
          type: string
          example: Smith
        organization:
          type: string
          example: Livepeer
        phone:
          type: string
          example: 2034212122
        stripeProductId:
          type: string
          enum:
            - prod_0
            - prod_1
            - prod_2
        stripeCustomerId:
          type: string
          example: cus_Jv6KvgT0DCH8HU
        stripeCustomerPaymentMethodId:
          type: string
          example: pm_2FSSNNJfrKDAwlJ9n4EN15Du
        stripeCustomerSubscriptionId:
          type: string
          example: sub_I29pdyfOTPBkjb
        ccLast4:
          type: string
          example: 1234
        ccBrand:
          type: string
          example: 1234
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which user object was created
          example: 1587667174725
        verifiedAt:
          type: number
          description:
            Timestamp (in milliseconds) at which user object was verified
          example: 1587667174725
        planChangedAt:
          type: number
          description:
            Timestamp (in milliseconds) at which user object was verified
          example: 1587667174725
        lastStreamedAt:
          type: number
          description: >-
            Timestamp (in milliseconds) at which user streamed RTMP stream last
            time
          example: 1587667174725
        lastSeen:
          type: number
          description:
            Timestamp (in milliseconds) at which user's password was used
          example: 1587667174725
        recaptchaToken:
          type: string
          example: >-
            03AGdBq24blDQQCyt9BSYjS0YZ3-tZapaQ5xO2-oykG_4dS_91TzH9qOziOwXbff_QiDOsXmWKxqtOrmOEx7qjijNhbexBzvNjM6HbbhXcji1rKcxxQRsL-t3SbycwZuNXos9OjnrYmfV9F3zsy1o73ia5Wlw_Zcf1jwbm3n-yQ2epifcMHXJhsUrqmUe6a1J1mPaD2heHvCOS3vYm0rWijdMl2E4bXQf75BiWvbLKxCWv5ZF8279nCMcGyJBIw1kno-A0x5KTOlEVxV369nz12lkvRfOtRABKB49jMTygAc2BKh9GBlAYGO6PBPoIk7_BCo7I_hsHoJeT4c80ucOPraZby0QJM5jcCQcqVCYrcaPKPiUMcIEixIhB5FAfDs88uYqDWMcgZdMRKCvmxEC3ONDVDtq0nLMc4rniuC5sQTz1E4D6SR_Adik
          description: Recaptcha v3 Token
          writeOnly: true
        internal:
          type: boolean
          example: false
          description:
            Internal user that should be disregarded from usage information
        isTestUser:
          type: boolean
          example: false
          description:
            User creates test streams and playbackIds should be flagged as such
    experiment:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: Name that identifies the experiment. Must be unique
        userId:
          type: string
          description: >-
            User ID of the creator of the experiment. Only used for auditing as
            experiment APIs is only accessible to admins, which can all
            experiments anyway.
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which the experiment was created
          example: 1587667174725
        updatedAt:
          type: number
          description:
            Timestamp (in milliseconds) at which experiment was updated
          example: 1587667174725
        audienceUserIds:
          type: array
          description: List of user IDs in the experiment
          items:
            type: string
        audienceUsers:
          type: array
          description: User objects of users in the experiment for convenience
          items:
            $ref: "#/components/schemas/user"
    usage:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: day associated with usage
          example: 2021-01-30T00:00:00.000Z
        kind:
          type: string
          example: usage
        date:
          type: number
          example: usage
        sourceSegments:
          type: number
          example: 200000
        transcodedSegments:
          type: number
          example: 200000
        sourceSegmentsDuration:
          type: number
          example: 200000
        transcodedSegmentsDuration:
          type: number
          example: 200000
        streamCount:
          type: number
          example: 200000

paths:
  /stream:
    post:
      summary: Create a new stream
      description: This endpoint allows users to create a new stream resource.
      requestBody:
        description: Stream resource to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/stream"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stream"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      summary: Retrieve the list of all streams
      description:
        This endpoint allows users to retrieve the list of all streams
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stream"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  "/stream/{id}":
    parameters:
      - name: id
        description: The ID of the stream to retrieve
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a specific stream
      description: This endpoint allows users to retrieve a specific stream
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stream"
        "404":
          description: Stream not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Update a specific stream
      description: This endpoint allows users to update a specific stream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stream-patch-payload"
      responses:
        "204":
          description: Success
        "404":
          description: Stream not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /object-store:
    post:
      description: Receives store credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/object-store"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/object-store"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      description: Lists object store credentials by userId
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/object-store"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /multistream/target:
    get:
      summary: Retrieve existing multistream targets
      description:
        This endpoint allows users to retrieve existing multistream targets
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/multistream-target"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      summary: Creates new multistream target
      description: This endpoint allows users to create a new multistream target
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/multistream-target"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/multistream-target"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  "/multistream/target/{id}":
    parameters:
      - name: id
        description: ID of the multistream target
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a specific multistream target details
      description:
        This endpoint allows users to retrieve a specific multistream target
        details
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/multistream-target"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Update an existing multistream target
      description:
        This endpoint allows users to update (enable/disable) an existing
        multistream target
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/multistream-target-patch-payload"
      responses:
        "204":
          description: Success
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      summary: Delete an existing multistream target
      description:
        This endpoint allows users to delete an existing multistream target
      responses:
        "204":
          description: Success
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user-verification:
    post:
      description: Verifies user email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/user-verification"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user-verification"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /password-reset-token:
    post:
      description: Creates a password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/password-reset-token-request"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/password-reset-token"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /password-reset:
    post:
      description: Confirms password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/password-reset-confirm"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /verify-email:
    post:
      description: Resend User Email Verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/verify-email"
      responses:
        "200":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /make-admin:
    post:
      description: Changes user admin status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/make-admin"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/user"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/token:
    post:
      description: Receives user login information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user:
    post:
      description: Endpoint that receives user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      description: Retrieves a list of users
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  "/user/{id}":
    patch:
      summary: Update a user
      description: Updates the information for the user with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
      requestBody:
        description: The updated user information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api-token:
    post:
      description: Create a new API token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/api-token"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/api-token"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      description: List all API tokens created by the user
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/api-token"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api-token"

  /webhook:
    get:
      summary: Retrieve a list of webhooks
      description:
        This endpoint allows users to retrieve a list of webhooks defined by the
        user.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/webhook"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      summary: Create a new webhook.
      description:
        This endpoint allows users to create a new webhook with the specified
        configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  "/webhook/{id}":
    get:
      summary: Get webhook details
      description:
        This endpoint allows users to get details about a specific webhook by
        its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the webhook to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      summary: Update a webhook
      description:
        This endpoint allows users to update an existing webhook by its ID.
      parameters:
        - name: id
          in: path
          description: The ID of the webhook to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      summary: Delete a webhook
      description:
        This endpoint allows users to delete a specific webhook by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the webhook to delete.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /asset:
    get:
      summary: Retrieves a list of assets
      description:
        This endpoint allows users to retrieve a list of assets defined by the
        user
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/asset"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  "/region/{region}":
    get:
      description:
        This endpoint allows users to retrieves a list of orchestrators for a
        specific region
      summary: Retrieve the list of orchestrators
      parameters:
        - name: region
          in: path
          description: The name of the region to retrieve orchestrators for
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/region"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      parameters:
        - name: region
          in: path
          description: The name of the region to update
          required: true
          schema:
            type: string
      description: This endpoint allows users to updates a specific region
      summary: Updates a specific region
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/region"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      parameters:
        - name: region
          in: path
          description: The name of the region to delete
          required: true
          schema:
            type: string
      summary: Deletes a specific region
      description: This endpoint allows users to delete a specific region
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"