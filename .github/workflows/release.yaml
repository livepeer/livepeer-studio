name: pkg releases

on:
  push:
    branches-ignore:
      - latest
    tags:
      - "v*"

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "yarn"

      - name: Tags
        id: tags
        uses: livepeer/action-gh-release-tags@v0

      - name: restore lerna
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: yarn install
        run: |
          yarn install --frozen-lockfile

      - name: build pkgs
        # I want to do --parallel here, but the binary downloads conflict with each other
        run: |
          yarn run lerna-run pkg

      - name: move pkgs
        run: |
          mkdir -p releases/
          for package in api www; do
            for arch in linux-arm64 linux-x64 macos-arm64 macos-x64 win-x64; do
              in_name="$package-$arch"
              out_name="livepeer-$package"
              archive_name="livepeer-$(echo $in_name | sed -e 's/x64/amd64/;s/win/windows/;s/macos/darwin/')"
              cd ./packages/$package/bin
              if [[ "$arch" == "win-x64" ]]; then
                in_name="$in_name.exe"
                out_name="$out_name.exe"
                mv ./$in_name ./$out_name
                zip -q9 "../../../releases/${archive_name}.zip" "./$out_name"
              else
                mv ./$in_name ./$out_name
                tar -czvf "../../../releases/${archive_name}.tar.gz" "./$out_name"
              fi
              cd -
            done
          done
          ls -lh releases/

      - name: Create sha256 checksums
        run: |
          cd releases/
          for file in ./*; do
            sha256sum "$file" > "${file}.txt"
          done

      - name: Create detached gpg signatures for releases
        run: |
          cd releases/
          echo "$CI_GPG_SIGNING_KEY" | gpg --batch --import
          echo "Signature imported!"
           for file in $(ls ./ -I "*.txt"); do
             gpg \
               --no-tty \
               --passphrase "$CI_GPG_SIGNING_PASSPHRASE" \
               --pinentry-mode loopback \
               --output "${file}.sig" \
               --detach-sign \
               "$file"
           done
        env:
          CI_GPG_SIGNING_KEY: ${{ secrets.CI_GPG_SIGNING_KEY }}
          CI_GPG_SIGNING_PASSPHRASE: ${{ secrets.CI_GPG_SIGNING_PASSPHRASE }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Add binaries to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./releases/livepeer-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
